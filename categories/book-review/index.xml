<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Book Review on maommm blog</title><link>https://maommm.github.io/hugo-blog/categories/book-review/</link><description>Recent content in Book Review on maommm blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 20 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maommm.github.io/hugo-blog/categories/book-review/index.xml" rel="self" type="application/rss+xml"/><item><title>レビュー - 改訂7版PMプロジェクトマネジメント</title><link>https://maommm.github.io/hugo-blog/p/waterfall-projectmanagement/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/waterfall-projectmanagement/</guid><description>&lt;hr>
&lt;p>始める前に愚痴を1つ。&lt;br>
私はどちらかというとWebサイトの制作・開発に近いPMでWebディレクターとも呼べるのだが、PMと名乗るとなぜかSIerなどのシステム開発のPMと勘違いされるというか、システムやっていない人間がPM名乗るな、と思っている人に時たま会う。そうすると、なぜか経歴詐称というか無駄に誇張するなよ的な扱いを受けることが極たまにあうのだが、これは本当に不当だと思う。 &lt;br>
プロジェクトはプロジェクトなんだからPMだろ、と思うし、そもそも英語ではWeb Directorなんて一般的な表現ではないのでPMと名乗るのが普通というかそれ以外の表現が思い浮かばないし、PMBOKでもプロジェクトの定義にITなんて単語はないんだから、何の業界でもPMはPMだろと言いたくなる衝動にかられる。&lt;br>
知り合いにも翻訳やライティングのPMとかいるし。という愚痴。&lt;br>
この本を読んで思ってなぜかこれを思い出しました。以上。&lt;/p>
&lt;hr>
&lt;h3 id="基本情報">基本情報&lt;/h3>
&lt;p>タイトル: &lt;a class="link" href="https://www.amazon.co.jp/%E6%94%B9%E8%A8%827%E7%89%88-PM%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88-PMBOK%C2%AE%E3%82%AC%E3%82%A4%E3%83%89%E5%AF%BE%E5%BF%9C-%E4%B8%AD%E5%B6%8B-%E7%A7%80%E9%9A%86/dp/4800590000" target="_blank" rel="noopener"
>改訂7版 PMプロジェクトマネジメント&lt;/a>&lt;br>
出版年: 2022年&lt;br>
著者: 中島 秀隆&lt;br>
読もうと思った理由: ざ・なんとなく&lt;/p>
&lt;h3 id="本の内容">本の内容&lt;/h3>
&lt;p>PMの基本的な内容が掲載されている。どちらかというと初めてPMするような人に対してフレームワークを教えるようなイメージ。&lt;br>
プロジェクトの例などが、よくあるシステムやITではなく、新規事業やカンファレンス開催などの別業界のプロジェクトなので、一般的な話として入ってきやすい。&lt;br>
例えば新オフィス設営に向けた作業記述書など、分かりやすい。&lt;br>
ネガティブなポイントとしては、誤字脱字はかなり多い。その他、全体的に分かりにくい所が散見される。例えば、例を出したがその例を使用して何を伝えたかったかが記載されていなかったり、所々に知り合いのPMの名言コーナー?みたいなものが挿入されているが、これもどこの誰がなぜこれを発言したのかが分かりにくかったり。&lt;/p>
&lt;h3 id="参考になった点">参考になった点&lt;/h3>
&lt;h4 id="スケジュール案策定の過程">スケジュール案策定の過程&lt;/h4>
&lt;blockquote>
&lt;p>「予測型」（ウォーターフォール方式）のプロジェクトのスケジュール案には4つ必要であることがわかる。まず、プロジェクトでやるべき作業を洗い出し（ステップ３）、各作業の依存関係に基づきネットワーク図を作る。このネットワーク図をガント・チャートに表したものが、第1のスケジュール案だ（ステップ5－2）。とはいえ、こうしてできたスケジュールがスポンサーの要求を満たすとは限らない。依頼者の要求よりもクリティカル・パスの所要期間が長すぎるということがよくある。そこでは、クリティカル・パスの短縮が必要となる。こういう調整を経て、第2のスケジュール案ができる（同じく、ステップ5－2）。だが、ここまででは、メンバーにかかる作業負荷を考えていない。つまり、ヒトは無尽蔵にいて、無限に投入できるという前提に立っているが、これは現実的ではない。プロジェクトに参加するメンバーの負荷を把握し、調整・平準化しなければならない。これをするのが「負荷をならす」（ステップ5－3）だ。これにより、プロジェクトの終了期限を延期することもある。こういう調整を反映したものが、第３のスケジュール案である。ここまできたら、他の要素の検討も踏まえ、関係者の「承認を取りつけ、ベースラインを設定する」（ステップ8）。これが第4のスケジュール案であり、第1次の実行案だ。こうして4つのスケジュール案の積み重ねから、誰もが納得するスケジュールができあがる。&lt;/p>
&lt;/blockquote>
&lt;p>たまにスケジュールを考える際に、全部を一度に考えてしまうことがあるので、こういう順序だては参考にしたい。&lt;/p></description></item><item><title>レビュー - 演習で身につく要件定義の実践テクニック</title><link>https://maommm.github.io/hugo-blog/p/enshu-yoken/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/enshu-yoken/</guid><description>&lt;hr>
&lt;p>読んだ本の感想。&lt;br>
要件の抜け漏れを防いだり、コミュニケーションのための細かいテクニックとかの話が中心。演習みたいな感じで立ち止まって考える必要があるので良いとは思った。うん。&lt;/p>
&lt;hr>
&lt;h3 id="基本情報">基本情報&lt;/h3>
&lt;p>タイトル: &lt;a class="link" href="https://www.amazon.co.jp/%E6%BC%94%E7%BF%92%E3%81%A7%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9%E3%81%AE%E5%AE%9F%E8%B7%B5%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-%E6%B0%B4%E7%94%B0-%E5%93%B2%E9%83%8E/dp/482225884X" target="_blank" rel="noopener"
>演習で身につく要件定義の実践テクニック&lt;/a>&lt;br>
出版年: 2017年&lt;br>
著者: 水田 哲郎 (日立コンサルティング理事)&lt;br>
読もうと思った理由: 演習できるんならただ読むより役に立つのかも、というとりとめのない理由&lt;/p>
&lt;h3 id="本の内容">本の内容&lt;/h3>
&lt;p>要件の抜け漏れを防いだり、コミュニケーションのための細かいテクニックとかの話が中心。&lt;br>
要所要所で演習みたいな感じで立ち止まって考える必要があるので良いとは思った。うん。&lt;/p>
&lt;h3 id="参考になった点">参考になった点&lt;/h3>
&lt;h4 id="要件定義時に提示する解決策について">要件定義時に提示する解決策について&lt;/h4>
&lt;blockquote>
&lt;p>解決策の資料を作成する際には、「システムに関係する業務だけでなく、人が担当する業務も含めて記載する」「人が担当する業務の変化がはっきり分かるように記載する」「解決策を実施することによるメリットを記載する」「解決策を実施するための制度や体制などの前提条件を記載する」の4点が重要です。&lt;/p>
&lt;/blockquote>
&lt;h4 id="業務場面洗い出し">業務場面洗い出し&lt;/h4>
&lt;blockquote>
&lt;p>業務場面を洗い出す際には、「商品・サービス」「顧客・得意先」「仕入れ先・取引先」「部署・場所」「時期・状況」「例外事象」の六つの観点の活用が有効です。「例外事象」とは、一定の頻度で発生する例外的な事象のことです。&lt;/p>
&lt;/blockquote>
&lt;h4 id="非機能要件洗い出し">非機能要件洗い出し&lt;/h4>
&lt;blockquote>
&lt;p>非機能要件は、「性能」「操作性」「信頼性」「セキュリティ」「移行性」「保守性」「拡張性」という七つの観点に分けて整理します。 最初に、サブシステムごとに、利用部門やシステム部門から先の七つの観点で要望を洗い出します。 次に、洗い出した要望の重要性を評価し、重要性の高い要望を実現するための非機能要件を明らかにします。そして、非機能要件についての具体的な施策を検討する工程と方法を決めておきます。&lt;/p>
&lt;/blockquote>
&lt;h4 id="アンケート">アンケート&lt;/h4>
&lt;p>ヒアリング前にアンケートを実施し、ヒアリングの質を高めることができる。&lt;/p>
&lt;blockquote>
&lt;p>そのときに有効なアンケートフォーマットが「RAカード（RequirementAnalysisカード）」です（図2）。RAカードは、書き手の意見を「問題（現行業務で起きている問題）」「影響（問題の結果として発生している影響）」「原因（問題を引き起こしている重要な原因）」「願望（問題の解決策や業務の改善案）」という4項目に分けて記入するアンケートフォーマットです。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>フリーフォーマットには「提供する情報量に差が生じやすい」「理解するのに手間や時間がかかる」「類似した意見が複数のアンケートに分かれやすい」などの欠点があります。　一方、RAカードは、それぞれの項目に2～3行の文章で記入してもらうので、提供する情報量に差が生じにくく、内容を比較的容易に理解できます。また、書き手が「何が問題で、どんな影響があるのか」「問題を発生させている原因は何か」考えて記入するので、因果関係のある意見を1枚に集約しやすくなります。&lt;/p>
&lt;/blockquote>
&lt;p>ただしこの時、問題や要望が業務上ではなく、現行システム上のものになってしまうことがあるのであくまでITに限らないことを周知する。&lt;br>
また、要望が一部の個人から多く出ることを防ぐため、カードの記入枚数に制限を設ける。&lt;/p>
&lt;h4 id="新業務定着化施策">新業務定着化施策&lt;/h4>
&lt;p>新規性の高い業務やシステムについては、それを実行・定着させるための施策を検討し、作業計画に盛り込む。 その観点として、動機付け（導入目的、必要性の周知・説明）、教育・研修、業務規定化(業務マニュアル改定、目標管理に盛り込むなど)、評価・表彰、業務支援(アドバイス体制や現行業務の代行など)&lt;/p></description></item><item><title>レビュー - 実践ゲームUIデザイン コンセプト策定から実装のコツまで</title><link>https://maommm.github.io/hugo-blog/p/review-gameui/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/review-gameui/</guid><description>&lt;p>読んだ本の感想。
ゲームのUIはWebに比べ複雑で大規模なものが多く、かなり参考になった。
Webディレクターは皆読むとよいのではないかってレベル。&lt;/p>
&lt;hr>
&lt;h3 id="基本情報">基本情報&lt;/h3>
&lt;p>タイトル: &lt;a class="link" href="https://www.amazon.co.jp/-/en/%E5%A4%AA%E7%94%B0%E5%9E%A3-%E6%B2%99%E4%B9%9F%E5%AD%90-ebook/dp/B09YTRT3KY/" target="_blank" rel="noopener"
>実践ゲームUIデザイン コンセプト策定から実装のコツまで&lt;/a>&lt;br>
出版年: 2022年&lt;br>
著者: 太田垣 沙也子 (バンダイナムコのプロデューサーさんらしい)&lt;br>
読もうと思った理由: WebサイトのUIとゲームのUIはどう違うんだろうか、という単純な疑問より。&lt;/p>
&lt;h3 id="本の内容">本の内容&lt;/h3>
&lt;p>ゲーム業界のUIデザインの話がまとまった本。
コンセプトの策定、フォントやカラーの計画から、実装後のテストやリファクタリングまで、一通りの業務概要や気を付ける点が記載してある。&lt;/p>
&lt;h3 id="参考になった点">参考になった点&lt;/h3>
&lt;ul>
&lt;li>ゲームUIに必要な視点&lt;br>
ゲームはエンターテインメントであることをゲームのUIにおける最大のポイント。これは他業界のUIではそこまで意識されない点である。
以下引用&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ゲームのUIは、段階的な学習を促すことで課題をクリアする快感を 味わってもらったり、作品のもつ世界観に浸ってもらうなどの役割 があるのです。 その ため には、機能性やコンバージョンの追求だけでなく、ユーザーの感情を揺さぶるような仕掛けが必要です。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>トンマナ関連&lt;br>
コンセプトキーワード、カラー計画、フォント、モチーフ、ＵＩサンプルイメージをドキュメントにまとめ、チーム全体にプレゼンしてUIのトンマナをそろえていく。大規模な開発だとこうなるのか、と勉強になる。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>イメージソース収集&lt;br>
デザインのコンセプトのキーワードを決めたら、実際にデザインのサンプルを集め、チーム内でイメージの共有を行う。&lt;br>
この時、OKサンプルだけでなく、NGサンプルもしっかり集めておくと、認識の差異が生まれにくく、手戻り工数が削減される。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>カラー計画&lt;br>
UIで使用するベーシックカラーを決める。
個人的に目をひいたのは、進行カラー（ゲームの進行の際にユーザーが指標にできる）課金カラー、味方カラー、レアリティカラー、キャラクターカラーなど、カラーの指標がゲーム独特である点。また、Webサイトと違って開発範囲が大きくデザインが複雑になりがちなので、細かくベースカラーを決めている模様。参考になる。なお、増えすぎると画面が煩雑になるので不用意に色を増やすことはしないらしい。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>デザインモチーフの法務・QAとの確認
要は宗教や人種などのセンシティブな表現に関しての確認。海外展開時などに特に必要になる。これはWebサイトでもライティング表現などでもちろん必要な作業だが、ゲームの場合はよりシンボルなどが多くなるので、大変そうな印象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>UIサンプルイメージの制作手順&lt;/p>
&lt;ol>
&lt;li>手書きスケッチ&lt;/li>
&lt;li>テキスト配置&lt;br>
※テキスト量やフォントサイズがデザインに影響しやすいので、できるだけ早い段階で入れるそう。まあこれはwebサイトと同じか。&lt;/li>
&lt;li>素材はめ込み&lt;/li>
&lt;li>ラフデザイン&lt;/li>
&lt;li>仕上げ&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UIレギュレーション関連&lt;br>
トンマナ決定後、バージョン管理方法や命名規則などのレギュレーション管理を策定していく。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>テキストルール&lt;br>
UIで表示するテキスト群のルール。&lt;br>
これはWebの大規模サイトや多言語サイトとかと同じで、明確なガイドラインが必要な模様。そりゃそうだ。&lt;br>
NG例も明確に記載しているようで、これは参考にしようと思う。（いつも私はOKな例しか載せていなかった）&lt;/p>
&lt;ul>
&lt;li>語尾は体言止めにするか？&lt;/li>
&lt;li>システム側のテキスト文体は？&lt;/li>
&lt;li>ユーザー側のテキスト文体は？&lt;/li>
&lt;li>句読点はつけるのか？&lt;/li>
&lt;li>日付や時間の表記方法&lt;/li>
&lt;/ul>
&lt;p>表記ゆれが起こりやすいキーワードにはシソーラスリストを作成。&lt;/p>
&lt;ul>
&lt;li>ひらがな優先にするのか、漢字優先にするのか？&lt;/li>
&lt;li>送り仮名はどう添えるのか？&lt;/li>
&lt;li>全角・半角の使い分けは？&lt;/li>
&lt;/ul>
&lt;p>文章の禁則処理の使用策定&lt;/p>
&lt;ul>
&lt;li>句読点、閉じ括弧を行頭に位置させない、など &lt;br>
→これは動的な処理が含まれる場合はエンジニアと相談&lt;/li>
&lt;/ul>
&lt;p>本に記載されている具体例&lt;/p>
&lt;p>基本的なUIは体言止め&lt;/p>
&lt;ul>
&lt;li>OK例　決定&lt;/li>
&lt;li>NG例　決定する&lt;/li>
&lt;/ul>
&lt;p>システム視点では丁寧語を使用&lt;/p>
&lt;ul>
&lt;li>OK例　お待ちください&lt;/li>
&lt;li>NG例　待ってね&lt;/li>
&lt;/ul>
&lt;p>ユーザー視点では名詞を使用する&lt;/p>
&lt;ul>
&lt;li>OK例　決定　キャンセル&lt;/li>
&lt;li>NG例　はい　いいえ　OK！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>プロトタイピング&lt;/p>
&lt;ul>
&lt;li>
&lt;p>企画要件確認&lt;br>
→各画面の目的、機能、要素を整理する&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ゲームフロー&lt;br>
ゲームの場合は画面単位でUIデザインを進めると、画面間の遷移のUIが漏れてしまったり、画面間の流れを無視したUIデザインになりやすいため、全体の画面数、遷移ポイントの確認をまず行う。&lt;/p>
&lt;ol>
&lt;li>おおまかなメイン画面の洗い出し&lt;/li>
&lt;li>画面間の遷移をプロトタイピングツールなどでつなげる&lt;/li>
&lt;li>メインのフローが繋がったら、違和感がないか確認&lt;/li>
&lt;li>派生のサブ画面の洗い出し&lt;/li>
&lt;li>メイン画面とサブ画面をつなげる&lt;/li>
&lt;li>各フローの遷移に違和感がないか確認&lt;br>
※この段階では画面ごとのレイアウトは考えず、時間を割きすぎない&lt;/li>
&lt;/ol>
&lt;p>確認ポイントは以下&lt;/p>
&lt;ul>
&lt;li>所見のユーザーでも理解しやすいフローか&lt;/li>
&lt;li>段階的に学習できる、もしくは機能が提供されるフローか&lt;/li>
&lt;li>行き止まりのフローが存在しないか&lt;/li>
&lt;li>どこからも出入りできないフローが存在しないか&lt;/li>
&lt;li>ゲームのメインサイクルの遷移に違和感がないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>なお、ゲーム業界にはゲームのフローの分け方として、インゲーム、アウトゲームという考え方があるようで、前者格闘ゲームでいう対戦画面のようなゲームのメインの遊びの部分と、それまでのステージ選択や設定画面などの、それ以外のゲーム体験を分類する模様。
→この考え方はwebサイトやサービスでも使えるかもしれない。無意識に行う人は多いだろうが、明文化はあまりされていない気がする。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>デザイン&lt;/p>
&lt;ul>
&lt;li>
&lt;p>描画優先度
Webでもあるが、ゲームの場合はより厳格にルール化して、企画やエンジニアと認識を共有しておく必要がある。
例えば、特殊、システム、重要演出、固有機能、重要通知、常時表示、通常、演出、３D通知などのようなレイヤーに分ける。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>クオリティライン
各デザインの最終的なクオリティのラインを決定する。
実際には参考資料として、いくつかの画面をfixレベルまで作成して、それをベンチマークとして、できるだけ見える化。
要素としては、&lt;/p>
&lt;ul>
&lt;li>画面解像度&lt;/li>
&lt;li>質感&lt;/li>
&lt;li>装飾のボリューム&lt;/li>
&lt;li>アンチエイリアス&lt;/li>
&lt;li>演出&lt;br>
などがある模様&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>製品レギュレーション&lt;br>
プラットフォームによってルールがある模様。これはAndroidやiOSでも存在するのでアプリの場合は私も意識しておく必要がある。&lt;/p>
&lt;ul>
&lt;li>コントローラーなどの専用ハードウェアの画像の解像度&lt;/li>
&lt;li>一定時間以上のローディング中には何らかの情報やインタラクションを挿入する&lt;/li>
&lt;li>ユーザー層に合わせた肌の露出や暴力・性表現&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>再編集に向けたデータ調整&lt;br>
作成した各画像が、編集しやすい状態になっているかデータを調整する。&lt;br>
これにもOKサンプル、NGサンプルを用意してチーム内の認識を合わせている模様。&lt;/p>
&lt;ul>
&lt;li>ベクターデータかどうか&lt;/li>
&lt;li>レイヤーやレイヤーセットはわかりやすい命名になっているか&lt;/li>
&lt;li>テキストはアウトライン化したものではなく、編集機能を保持したデータも残しているか&lt;/li>
&lt;li>共通のパーツはシンボル化やスマートオブジェクトの仕組みを使用して、編集した場合にそのパーツを使用しているUIすべてに変更が反映されるか&lt;/li>
&lt;li>データはバージョン管理されているか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>開発&lt;/p>
&lt;ul>
&lt;li>
&lt;p>カルチャライズ&lt;br>
国や地域により、ゲームの内容を変更すること。ローカライズの一環だと思っていたが、言葉が分かれるらしい。&lt;br>
歴史、人種、公序良俗、色のイメージなどを精査して検討。ゲームの内容を大きく変更することもあるので、開発環境自体を分けることもある。&lt;br>
因みに国によっては、政府が推奨しない字形を用いたものはリリース不可となるそう。→軽く調べたがどの国か不明。中国で繫体字を使用するとか、そういう感じのものだろうか。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>デザイン基準解像度&lt;br>
確認時の解像度を決める。ターゲットユーザーの人口が最も多い解像度を基準にすることが一般的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>リダクション＆リファクタリング&lt;br>
リリース後も定期的に行う必要があるため、年間の運営スケジュールなどに工数として組み込むようにする。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>リダクション&lt;br>
リリース後も開発が続くとデータ量が増え、重くなる。なので減色やアトラス化などを行い、定期的にデータを削減したりする。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>リファクタリング&lt;br>
編集用データの不要な没デザインの削除、実装データの中で非表示になっているが削除されていないダミーデータの削除、各データのファイル形式の見直しなど&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UIのチェックフロー&lt;/p>
&lt;ol>
&lt;li>UIの実装ステータスとステータスごとのチェック項目を共有&lt;/li>
&lt;li>実際にゲームをプレイしてもらい、意見を集める&lt;/li>
&lt;li>届いた意見を管理しやすいカテゴリに分類&lt;/li>
&lt;li>カテゴリ内で肯定・否定・感想に分類&lt;/li>
&lt;li>優先度付け。&lt;/li>
&lt;li>ディレクターとどこまで対応するかすり合わせ&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UI改善について&lt;br>
使いやすいと思っても、ユーザーにとっては「使い慣れているので変えないでほしい」というケースもある&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>