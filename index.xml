<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maommm blog</title><link>https://maommm.github.io/hugo-blog/</link><description>Recent content on maommm blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 20 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maommm.github.io/hugo-blog/index.xml" rel="self" type="application/rss+xml"/><item><title>レビュー - 改訂7版PMプロジェクトマネジメント</title><link>https://maommm.github.io/hugo-blog/p/waterfall-projectmanagement/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/waterfall-projectmanagement/</guid><description>&lt;hr>
&lt;p>始める前に愚痴を1つ。&lt;br>
私はどちらかというとWebサイトの制作・開発に近いPMでWebディレクターとも呼べるのだが、PMと名乗るとなぜかSIerなどのシステム開発のPMと勘違いされるというか、システムやっていない人間がPM名乗るな、と思っている人に時たま会う。そうすると、なぜか経歴詐称というか無駄に誇張するなよ的な扱いを受けることが極たまにあうのだが、これは本当に不当だと思う。 &lt;br>
プロジェクトはプロジェクトなんだからPMだろ、と思うし、そもそも英語ではWeb Directorなんて一般的な表現ではないのでPMと名乗るのが普通というかそれ以外の表現が思い浮かばないし、PMBOKでもプロジェクトの定義にITなんて単語はないんだから、何の業界でもPMはPMだろと言いたくなる衝動にかられる。&lt;br>
知り合いにも翻訳やライティングのPMとかいるし。という愚痴。&lt;br>
この本を読んで思ってなぜかこれを思い出しました。以上。&lt;/p>
&lt;hr>
&lt;h3 id="基本情報">基本情報&lt;/h3>
&lt;p>タイトル: &lt;a class="link" href="https://www.amazon.co.jp/%E6%94%B9%E8%A8%827%E7%89%88-PM%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88-PMBOK%C2%AE%E3%82%AC%E3%82%A4%E3%83%89%E5%AF%BE%E5%BF%9C-%E4%B8%AD%E5%B6%8B-%E7%A7%80%E9%9A%86/dp/4800590000" target="_blank" rel="noopener"
>改訂7版 PMプロジェクトマネジメント&lt;/a>&lt;br>
出版年: 2022年&lt;br>
著者: 中島 秀隆&lt;br>
読もうと思った理由: ざ・なんとなく&lt;/p>
&lt;h3 id="本の内容">本の内容&lt;/h3>
&lt;p>PMの基本的な内容が掲載されている。どちらかというと初めてPMするような人に対してフレームワークを教えるようなイメージ。&lt;br>
プロジェクトの例などが、よくあるシステムやITではなく、新規事業やカンファレンス開催などの別業界のプロジェクトなので、一般的な話として入ってきやすい。&lt;br>
例えば新オフィス設営に向けた作業記述書など、分かりやすい。&lt;br>
ネガティブなポイントとしては、誤字脱字はかなり多い。その他、全体的に分かりにくい所が散見される。例えば、例を出したがその例を使用して何を伝えたかったかが記載されていなかったり、所々に知り合いのPMの名言コーナー?みたいなものが挿入されているが、これもどこの誰がなぜこれを発言したのかが分かりにくかったり。&lt;/p>
&lt;h3 id="参考になった点">参考になった点&lt;/h3>
&lt;h4 id="スケジュール案策定の過程">スケジュール案策定の過程&lt;/h4>
&lt;blockquote>
&lt;p>「予測型」（ウォーターフォール方式）のプロジェクトのスケジュール案には4つ必要であることがわかる。まず、プロジェクトでやるべき作業を洗い出し（ステップ３）、各作業の依存関係に基づきネットワーク図を作る。このネットワーク図をガント・チャートに表したものが、第1のスケジュール案だ（ステップ5－2）。とはいえ、こうしてできたスケジュールがスポンサーの要求を満たすとは限らない。依頼者の要求よりもクリティカル・パスの所要期間が長すぎるということがよくある。そこでは、クリティカル・パスの短縮が必要となる。こういう調整を経て、第2のスケジュール案ができる（同じく、ステップ5－2）。だが、ここまででは、メンバーにかかる作業負荷を考えていない。つまり、ヒトは無尽蔵にいて、無限に投入できるという前提に立っているが、これは現実的ではない。プロジェクトに参加するメンバーの負荷を把握し、調整・平準化しなければならない。これをするのが「負荷をならす」（ステップ5－3）だ。これにより、プロジェクトの終了期限を延期することもある。こういう調整を反映したものが、第３のスケジュール案である。ここまできたら、他の要素の検討も踏まえ、関係者の「承認を取りつけ、ベースラインを設定する」（ステップ8）。これが第4のスケジュール案であり、第1次の実行案だ。こうして4つのスケジュール案の積み重ねから、誰もが納得するスケジュールができあがる。&lt;/p>
&lt;/blockquote>
&lt;p>たまにスケジュールを考える際に、全部を一度に考えてしまうことがあるので、こういう順序だては参考にしたい。&lt;/p></description></item><item><title>仕事で英語を使いたい人の勉強の仕方とかその辺の話</title><link>https://maommm.github.io/hugo-blog/p/english-study/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/english-study/</guid><description>&lt;hr>
&lt;p>一応私は英語を話せる、使える方の人間らしい。数年前受けたIELTSで7.0(TOEICで900点くらい？)で、まあすごい話せるかというとそうでもないけど、生活や仕事、本や論文を読むうえで致命的に困ることはないくらいのレベルではあるかなと思っている。文法ミスなく綺麗に自分の伝えたいことを話せるか、というとそうでもないのだけど。。&lt;br>
とはいえ、英語が必要だけれど、英語がそんなにできない、という状況の人をよく見かける。&lt;br>
なので、そんな人に向けてなのか書くネタに困っているのかは知らないが、自分の英語の勉強とかを振り返ったり、今の生活での英語の関わり方をつらつら書いてみる。&lt;br>
追記: なんか、書いてみるとかなりの乱文になったので整理が必要そう。 なので本当に暇な人だけ読んでくださいませ。&lt;/p>
&lt;hr>
&lt;h3 id="リスニング">リスニング&lt;/h3>
&lt;p>意識的にしていることは特にない。&lt;br>
会話の機会を持ったりすると自然に上がるので、わざわざ勉強するものでも、、という感じ。&lt;br>
一応、Youtubeで時々英語の動画も見たりする。でもこれは単純にその動画が見たいからであって、特に勉強目的というわけではない。&lt;br>
ただし、勉強するならIELTSのリスニングの勉強などはしてもよいかもしれない。&lt;br>
IELTSのテストで、例えば電話番号を聞き取るときに、重複する数字をdouble &amp;ndash; (22ならdouble twoて感じ)と言ったり、英語文化的な側面が学べることもないことはないため。&lt;/p>
&lt;h3 id="スピーキング">スピーキング&lt;/h3>
&lt;p>話しましょう。これのみ。&lt;br>
話す機会がない場合は作りましょう。DMM英会話でもいいのでともかく時間をたくさん取りましょう。&lt;br>
金がない? 独り言を英語でいうようにしましょう。&lt;br>
うまく言えなかった文章はどのように言えば良かったのか後で確認すること。これはマスト。&lt;br>
あと。話す機会がない人はまず機会を作ることが重要ですが、仕事や生活で話す機会がたくさんある人も、ＤＭＭ英会話などで普段話さないシーンを想定して話すと、全然話せないこともあるので勉強になります。&lt;br>
私はオーストラリアで英語を勉強しているときは友達とどこかに遊びに言ったり、パーティとかで英語を使用していたので、日常会話は割と身についたが、そういった場面だと難しい英単語はなかなか使わない。なのでDMM英会話を夜にとって、ニュース記事の意見交換みたいなのを先生とやっていた。でも仕事で使い始めるまた違う英語が必要になった。大体そんな感じ。&lt;br>
あ、あと国によってそもそも英語の使い方が違う場合もある。インドとマレーシアとオーストラリアに住んでいたが、全ての国でビジネス英語の表現は異なる。伝わるかどうかが重要なので、ネイティブが正解と思ったりはしないように気を付けましょう。&lt;/p>
&lt;h3 id="ライティング">ライティング&lt;/h3>
&lt;p>書きましょう。&lt;br>
日常会話はhello talkなどの言語交換的なアプリで友達を作りましょう。&lt;br>
ビジネスはメールを書いたり、社内でやりとりしましょう。
また、単語はそのシーンや業界で使用されているものを使うために、普段から英語で目に通すくせはあったほうがよいかも。&lt;br>
あと、これに関してはIELTSはとても勉強になる。&lt;br>
複雑な英語を使わないといけないので、表現の仕方に幅が出ます。&lt;br>
また、これは特に意識してほしいのだが、&lt;br>
不慣れな言語を使用して長文を書くと、文章の流れもそれにつられて、自分が本来意図しない、変な流れになることもある。うまく表現できなくて若干意味の異なる文章だけどまあ表現できているか、という感じで次の文章を書くと、更にそこからずれる、みたいな。うーん、抽象的で分かりにくい。。 　　
まあまあ、とにかくそんな感じなので、長文を書く機会がある人はめっちゃ勉強した方がよい。&lt;br>
もしくは言いたいことを日本語できちんと清書しきってから書く、というのでもよいかもしれない。そのくらいしないとほんとにずれる。&lt;br>
僕は勉強していた時、安楽死について書いたエッセイが自分のくそみたいな文章につられて変な内容になり、ライティングを見てもらっていたアメリカ人のおじいちゃんにお前のエッセイはコミュニズムの影響を受けていると意味不明な評価を受けました。&lt;br>
※逆に日本で働く外国人の同僚の発言がおかしい、と思ったら同様のことを意識しておいてもよいかもしれません。 単語や表現がおかしいだけでなく、発言の流れ、意見そのものがおかしい場合であっても、その人の頭がおかしいのではなく、その人が自分の頭の中の嗜好の流れをうまく言語化できないまま発言し、さらにそこに日本語での表現で思考に歪みが入って表現できていない、と考えた方がよいこともあります。 たまに外国人は日本人みたいに分析や思考ができない、と言う人がいますが、そもそも他言語で表現すると思考がゆがみやすいのが原因の可能性も高いのです。&lt;/p>
&lt;h3 id="リーディング">リーディング&lt;/h3>
&lt;p>まあこれも読むしかない。&lt;br>
私はスマホやPCの設定、使うソフト、あとゲームなど全て英語設定で使用している。&lt;br>
こうすると目に慣れるし、英語に触れる機会も多いのでなかなかよい。（ゲームを英語でするときつい人はある程度英語ができるようになってからで）
それと表現も学べるし、仕事の際も認識を合わせやすくなる。
どういうことかというと、例えばオフィスソフトの「名前をつけて保存」は英語だと&amp;quot;Save as &amp;hellip;&amp;quot;　と表現される。&lt;br>
その他、エクセルで列を固定することを&amp;quot;freeze&amp;quot;と表現したり、根本的に表現が違うことが多い。&lt;br>
なので、仕事のコミュニケーションを取る際もこれらの英語を使用した方が伝わりやすい場合が多い。&lt;/p></description></item><item><title>異文化間の仕事の仕方、英語の使い方</title><link>https://maommm.github.io/hugo-blog/p/global-communication/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/global-communication/</guid><description>&lt;hr>
&lt;p>違う文化や国の人と仕事するとよくコミュニケーションでもめるのをよく見る。というか揉めてきたし今もよく揉める。&lt;br>
でもそれなりに工夫してきたつもりではある。一応。。&lt;br>
なので、たまには整理をしてみようという話。&lt;/p>
&lt;hr>
&lt;h3 id="はじめに">はじめに&lt;/h3>
&lt;p>仕事をする上でチームのメンバが共通認識を持つ、というのは非常に重要であるが、それにたどり着くのはとても大変である。&lt;br>
同じ会社で長く仕事をしてきたメンバならまだしも、職種、業種、国・地域、言語などが違うとこれがなかなかに難しく、仕事の手戻りやトラブルが発生しやすい。&lt;br>
ではどのように対処するべきか、いくつか方針をまとめて、具体的な方法を記載してみる。&lt;/p>
&lt;h3 id="基本的な考え方">基本的な考え方&lt;/h3>
&lt;ol>
&lt;li>言語に頼らない&lt;/li>
&lt;li>そもそも認識は合わないと認識する&lt;/li>
&lt;li>コミュニケーションを諦めない&lt;/li>
&lt;/ol>
&lt;h3 id="言語に頼らない">言語に頼らない&lt;/h3>
&lt;p>まずこれ。これ大事。なんかよく英語ができないせいだといって英語をめっちゃ勉強する人がいるが、英語ができただけでは認識は合わない。&lt;br>
最低限の英語はもちろん必要だが、そもそも日本語ですら話が通じない人がいるのに言語のレベルが上がったからといってコミュニケーションがよくなるわけではない。&lt;br>
文化の違いだってあるし、それ以前に相手もノンネイティブのことも多いし、何なら相手の方が英語できないことだってあるわけで。&lt;/p>
&lt;p>なので、言語のスキルはあるに越したことはない、と考えて別の方法も一緒に考えた方がよい。
具体的には以下のような感じ。&lt;/p>
&lt;h4 id="タスクの依頼時などはタスクの背景目的などを共有し情報が構造化された状態で渡す">タスクの依頼時などは、タスクの背景・目的などを共有し、情報が構造化された状態で渡す。&lt;/h4>
&lt;p>長文でわけわからんことを書かずに、目的、背景、問題、対応内容、期待する結果、対応期限、どの段階で1次確認をおこなうか、優先度などは依頼時にまとめておく。&lt;br>
そもそも日本語でもこれらのことを整理するのを面倒くさがる人が多いが、これを伝えるだけで守るべきことが明確になるので、認識の違いが起きにくい。&lt;br>
また、実際にトラブルが起こっても、ここに書いて伝えたよね？と確認してあげると、向こうの納得感も出る。次回から気を付けてくれやすい。逆に記載してなかった場合は仕方ないと思った方がいい。&lt;br>
なお、より相談ベースでハイレベルなやりとりを行いたい場合は相談しつつ、決定事項をどんどんローレベルに落として認識を合わせましょう。&lt;br>
抽象度が高いと、異なるバックグラウンドの人間間での認識の乖離は大きい可能性が高いので要注意。&lt;/p>
&lt;h4 id="言葉で伝わりにくい場合はスクリーンショットや動画を作成し共有する">言葉で伝わりにくい場合はスクリーンショットや動画を作成し、共有する&lt;/h4>
&lt;p>当然、言葉より見た方が早いという事態はくっそ多い。なのでできるだけスクショと動画で伝えましょう。&lt;br>
スクショや動画の作成ツール -&amp;gt; &lt;a class="link" href="https://gyazo.com/" target="_blank" rel="noopener"
>https://gyazo.com/&lt;/a>&lt;br>
絵や図で伝えたい場合 -&amp;gt; Jambourd, Onenote等に描いちゃいましょう。ペンタブがあると超便利。&lt;br>
場合によってはオンサイトでホワイドボードなどを用いてコミュニケーションをとった方がよいことも多いと思う。&lt;/p>
&lt;h4 id="必要な情報が遮断されていないか気を付ける">必要な情報が遮断されていないか気を付ける&lt;/h4>
&lt;p>日本企業内に海外のチームがいる場合など、特にこれが起きやすく、そして気づかない人が多い。　　
チーム内では情報が共有されているが、別のチーム、特に海外出身者でまとまっているようなチームには、翻訳の手間などでつい伝え漏れていた、ということが多い。&lt;br>
この状態だと、タスクを依頼しても、担当者が状況を理解していないため、期待している結果と違う結果で出てくることがある。&lt;br>
ややこしいのが、情報共有ができていないからトラブルが起きやすい状況になっている、ということに依頼者が理解していないことが多い。&lt;br>
なので、情報共有については極力壁を作らないよう、常日頃から意識しておく。(これもそもそも日本語であってもだが)&lt;br>
例えば、&lt;/p>
&lt;ul>
&lt;li>チャットツールでPJのチャットグループと英語チャットグループみたいな形で、分かれてしまっていないか。&lt;/li>
&lt;li>日本語のやり取りが楽だからという理由で、重要な意思決定まで全て日本語で行い、気づいたらノンネイティブのメンバが置き去りになっていないか。&lt;/li>
&lt;li>共有すべき情報としなくてもよい情報をPJの管理者が意識できているか。そのすり合わせを行っているか。
上記のようなことは意識しておくべきと思われる。&lt;/li>
&lt;/ul>
&lt;h3 id="そもそも認識は合わないと認識する">そもそも認識は合わないと認識する&lt;/h3>
&lt;p>これも大事。なんかグローバルなコミュニケーションになった途端に認識が合わない合わない言う人が多いが、そもそも日本人の間なら認識がいつも合うのか、ちょっと問いたくなる。&lt;br>
どれだけ正確に伝わるようにしたところで、人から人のやりとりの間には、言語、文化、性別、その時の感情、業界、職種、など様々な壁がある。&lt;br>
これを全て取っ払うのは無理だと思った方がよい。&lt;br>
その前提をもとに以下のようなことに気を付けたい。&lt;/p>
&lt;h4 id="認識違いを考慮した十分なバッファをとる">認識違いを考慮した十分なバッファをとる&lt;/h4>
&lt;p>依頼したタスクの軌道修正が発生するということを意識して、バッファは十分とる。取れない場合も多いが。。&lt;br>
また、文化的に遅れてもいいや、と思ってしまう作業者には納期を早めに伝えておくなど、個別の対策をとっておくことも重要。&lt;/p>
&lt;h4 id="修正を前提に細かい確認のタイミングを入れる">修正を前提に細かい確認のタイミングを入れる&lt;/h4>
&lt;p>依頼したタスクが斜め上の方向に行くことはよくあると思うが、早めに軌道修正できるよう、確認のタイミングは細かく設ける。&lt;br>
タスクにもよるが、この段階になったらmtgしよう、だったり、毎日のmtgで状況を軽く確認したりして、認識にズレがないか気を配る。&lt;br>
ただし、マイクロマネジメントにならないようには、細かい指示を出したりはしないようにする。メンバのやる気がそがれてしまっては元も子もない。&lt;/p>
&lt;h3 id="コミュニケーションを諦めない">コミュニケーションを諦めない&lt;/h3>
&lt;p>最後に、相互理解を諦めないようにすること。相手が理解しない、みたいな態度になったり、改善を諦めると、相手もこちらを信用しなくなってしまう。&lt;br>
お互いに悪い感情を持ったままPJを進めてしまったり、お互いの可能性をつぶしてしまう。なので、常に理解と改善を諦めないようにする。
具体的な話は以下。&lt;/p>
&lt;h4 id="面倒くさがらない仕組み化する">面倒くさがらない&amp;amp;仕組み化する&lt;/h4>
&lt;p>１つ目は、面倒くさがらないこと。ここまでの話で分かるように、きちんと認識を合わせて仕事をするのはかなり面倒くさい。&lt;br>
だが面倒くさがって、例えばタスクの記述を曖昧にしたり、スクショをとらなかったりすると、更なる問題に発展しやすい。&lt;br>
なので、基本は面倒くさがらないことが大切。&lt;br>
とは言っても面倒くさい。マジでめんどい。それはそう。&lt;br>
なので、タスク依頼だったりはできるだけテンプレ化しておいたり、スクショの添付をお互いにルール付けたりして、仕組みで解決しておきたいところ。&lt;/p>
&lt;h4 id="感情的にならないorなっても大丈夫なようにする">感情的にならないorなっても大丈夫なようにする&lt;/h4>
&lt;p>ただでさえ説明が面倒なのに、そのうえで認識が合わないとイライラする。上がってきたタスクが話にならない状態だった尚更である。&lt;br>
でもこれは向こうもそうなのである。なんとか意味不明な英語のやりとりを乗り越えてタスクを上げたら違うとか言われてむかつくことこの上ない。&lt;br>
そこで感情的になっても意味はないので、基本的には相互理解に努めたい、、がどうしてもむかつく。それはそう。&lt;br>
こういった場合に直面したら、私はできるだけ、mtgなどで顔を合わせるようにしている。少なくともお互いに敵意がないのが分かるので、メンバの感情も悪い方向に行きにくい。&lt;br>
頻繁に顔を合わせれば、少々お互いにイライラしていても、すぐにもとに戻るようになるので、工数を圧迫しないように気を付けつつ、15分ほどの打ち合わせは定期的に持ちたいところ。&lt;/p>
&lt;h4 id="自分と相手のことを理解する">自分と相手のことを理解する&lt;/h4>
&lt;p>ここまで書いてきた話に抜けている点が１つある。それはそもそも自分の仕事のやり方が日本での仕事の仕方ということである。&lt;br>
相手も違う文化圏で仕事してきているのだから、そもそも仕事のやり方に正しいやり方は存在しないという意識を持ちたい。&lt;br>
納期を守らないことがそんなに問題にならない文化もあるわけで、チームの仕事の文化はお互いに醸成していくもの、としたい。&lt;br>
以上精神論的なお話でした。&lt;/p>
&lt;h4 id="あと1つだけ">あと1つだけ&lt;/h4>
&lt;p>PMやディレクターがつい忘れてしまうのが、資料の翻訳の工数である。&lt;br>
最初から英語で作成するなら問題ないが、日本語→英語などで資料を降ろす場合は、各工程の後ろに翻訳の工程を設けた方が良い。&lt;br>
私はこれが原因で無駄に残業しまくったことが何度かある。&lt;/p>
&lt;h4 id="最後に">最後に&lt;/h4>
&lt;p>まとめてみたら気を付けること、意外にあった。&lt;br>
でも基本的には日本人の間でも普段から対策するべきことばかりではある。&lt;br>
異文化がどうこうの前に自分のコミュニケーションのやり方の前提を疑いましょう。&lt;/p></description></item><item><title>レビュー - 演習で身につく要件定義の実践テクニック</title><link>https://maommm.github.io/hugo-blog/p/enshu-yoken/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/enshu-yoken/</guid><description>&lt;hr>
&lt;p>読んだ本の感想。&lt;br>
要件の抜け漏れを防いだり、コミュニケーションのための細かいテクニックとかの話が中心。演習みたいな感じで立ち止まって考える必要があるので良いとは思った。うん。&lt;/p>
&lt;hr>
&lt;h3 id="基本情報">基本情報&lt;/h3>
&lt;p>タイトル: &lt;a class="link" href="https://www.amazon.co.jp/%E6%BC%94%E7%BF%92%E3%81%A7%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9%E3%81%AE%E5%AE%9F%E8%B7%B5%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-%E6%B0%B4%E7%94%B0-%E5%93%B2%E9%83%8E/dp/482225884X" target="_blank" rel="noopener"
>演習で身につく要件定義の実践テクニック&lt;/a>&lt;br>
出版年: 2017年&lt;br>
著者: 水田 哲郎 (日立コンサルティング理事)&lt;br>
読もうと思った理由: 演習できるんならただ読むより役に立つのかも、というとりとめのない理由&lt;/p>
&lt;h3 id="本の内容">本の内容&lt;/h3>
&lt;p>要件の抜け漏れを防いだり、コミュニケーションのための細かいテクニックとかの話が中心。&lt;br>
要所要所で演習みたいな感じで立ち止まって考える必要があるので良いとは思った。うん。&lt;/p>
&lt;h3 id="参考になった点">参考になった点&lt;/h3>
&lt;h4 id="要件定義時に提示する解決策について">要件定義時に提示する解決策について&lt;/h4>
&lt;blockquote>
&lt;p>解決策の資料を作成する際には、「システムに関係する業務だけでなく、人が担当する業務も含めて記載する」「人が担当する業務の変化がはっきり分かるように記載する」「解決策を実施することによるメリットを記載する」「解決策を実施するための制度や体制などの前提条件を記載する」の4点が重要です。&lt;/p>
&lt;/blockquote>
&lt;h4 id="業務場面洗い出し">業務場面洗い出し&lt;/h4>
&lt;blockquote>
&lt;p>業務場面を洗い出す際には、「商品・サービス」「顧客・得意先」「仕入れ先・取引先」「部署・場所」「時期・状況」「例外事象」の六つの観点の活用が有効です。「例外事象」とは、一定の頻度で発生する例外的な事象のことです。&lt;/p>
&lt;/blockquote>
&lt;h4 id="非機能要件洗い出し">非機能要件洗い出し&lt;/h4>
&lt;blockquote>
&lt;p>非機能要件は、「性能」「操作性」「信頼性」「セキュリティ」「移行性」「保守性」「拡張性」という七つの観点に分けて整理します。 最初に、サブシステムごとに、利用部門やシステム部門から先の七つの観点で要望を洗い出します。 次に、洗い出した要望の重要性を評価し、重要性の高い要望を実現するための非機能要件を明らかにします。そして、非機能要件についての具体的な施策を検討する工程と方法を決めておきます。&lt;/p>
&lt;/blockquote>
&lt;h4 id="アンケート">アンケート&lt;/h4>
&lt;p>ヒアリング前にアンケートを実施し、ヒアリングの質を高めることができる。&lt;/p>
&lt;blockquote>
&lt;p>そのときに有効なアンケートフォーマットが「RAカード（RequirementAnalysisカード）」です（図2）。RAカードは、書き手の意見を「問題（現行業務で起きている問題）」「影響（問題の結果として発生している影響）」「原因（問題を引き起こしている重要な原因）」「願望（問題の解決策や業務の改善案）」という4項目に分けて記入するアンケートフォーマットです。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>フリーフォーマットには「提供する情報量に差が生じやすい」「理解するのに手間や時間がかかる」「類似した意見が複数のアンケートに分かれやすい」などの欠点があります。　一方、RAカードは、それぞれの項目に2～3行の文章で記入してもらうので、提供する情報量に差が生じにくく、内容を比較的容易に理解できます。また、書き手が「何が問題で、どんな影響があるのか」「問題を発生させている原因は何か」考えて記入するので、因果関係のある意見を1枚に集約しやすくなります。&lt;/p>
&lt;/blockquote>
&lt;p>ただしこの時、問題や要望が業務上ではなく、現行システム上のものになってしまうことがあるのであくまでITに限らないことを周知する。&lt;br>
また、要望が一部の個人から多く出ることを防ぐため、カードの記入枚数に制限を設ける。&lt;/p>
&lt;h4 id="新業務定着化施策">新業務定着化施策&lt;/h4>
&lt;p>新規性の高い業務やシステムについては、それを実行・定着させるための施策を検討し、作業計画に盛り込む。 その観点として、動機付け（導入目的、必要性の周知・説明）、教育・研修、業務規定化(業務マニュアル改定、目標管理に盛り込むなど)、評価・表彰、業務支援(アドバイス体制や現行業務の代行など)&lt;/p></description></item><item><title>レビュー - 実践ゲームUIデザイン コンセプト策定から実装のコツまで</title><link>https://maommm.github.io/hugo-blog/p/review-gameui/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/review-gameui/</guid><description>&lt;p>読んだ本の感想。
ゲームのUIはWebに比べ複雑で大規模なものが多く、かなり参考になった。
Webディレクターは皆読むとよいのではないかってレベル。&lt;/p>
&lt;hr>
&lt;h3 id="基本情報">基本情報&lt;/h3>
&lt;p>タイトル: &lt;a class="link" href="https://www.amazon.co.jp/-/en/%E5%A4%AA%E7%94%B0%E5%9E%A3-%E6%B2%99%E4%B9%9F%E5%AD%90-ebook/dp/B09YTRT3KY/" target="_blank" rel="noopener"
>実践ゲームUIデザイン コンセプト策定から実装のコツまで&lt;/a>&lt;br>
出版年: 2022年&lt;br>
著者: 太田垣 沙也子 (バンダイナムコのプロデューサーさんらしい)&lt;br>
読もうと思った理由: WebサイトのUIとゲームのUIはどう違うんだろうか、という単純な疑問より。&lt;/p>
&lt;h3 id="本の内容">本の内容&lt;/h3>
&lt;p>ゲーム業界のUIデザインの話がまとまった本。
コンセプトの策定、フォントやカラーの計画から、実装後のテストやリファクタリングまで、一通りの業務概要や気を付ける点が記載してある。&lt;/p>
&lt;h3 id="参考になった点">参考になった点&lt;/h3>
&lt;ul>
&lt;li>ゲームUIに必要な視点&lt;br>
ゲームはエンターテインメントであることをゲームのUIにおける最大のポイント。これは他業界のUIではそこまで意識されない点である。
以下引用&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ゲームのUIは、段階的な学習を促すことで課題をクリアする快感を 味わってもらったり、作品のもつ世界観に浸ってもらうなどの役割 があるのです。 その ため には、機能性やコンバージョンの追求だけでなく、ユーザーの感情を揺さぶるような仕掛けが必要です。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>トンマナ関連&lt;br>
コンセプトキーワード、カラー計画、フォント、モチーフ、ＵＩサンプルイメージをドキュメントにまとめ、チーム全体にプレゼンしてUIのトンマナをそろえていく。大規模な開発だとこうなるのか、と勉強になる。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>イメージソース収集&lt;br>
デザインのコンセプトのキーワードを決めたら、実際にデザインのサンプルを集め、チーム内でイメージの共有を行う。&lt;br>
この時、OKサンプルだけでなく、NGサンプルもしっかり集めておくと、認識の差異が生まれにくく、手戻り工数が削減される。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>カラー計画&lt;br>
UIで使用するベーシックカラーを決める。
個人的に目をひいたのは、進行カラー（ゲームの進行の際にユーザーが指標にできる）課金カラー、味方カラー、レアリティカラー、キャラクターカラーなど、カラーの指標がゲーム独特である点。また、Webサイトと違って開発範囲が大きくデザインが複雑になりがちなので、細かくベースカラーを決めている模様。参考になる。なお、増えすぎると画面が煩雑になるので不用意に色を増やすことはしないらしい。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>デザインモチーフの法務・QAとの確認
要は宗教や人種などのセンシティブな表現に関しての確認。海外展開時などに特に必要になる。これはWebサイトでもライティング表現などでもちろん必要な作業だが、ゲームの場合はよりシンボルなどが多くなるので、大変そうな印象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>UIサンプルイメージの制作手順&lt;/p>
&lt;ol>
&lt;li>手書きスケッチ&lt;/li>
&lt;li>テキスト配置&lt;br>
※テキスト量やフォントサイズがデザインに影響しやすいので、できるだけ早い段階で入れるそう。まあこれはwebサイトと同じか。&lt;/li>
&lt;li>素材はめ込み&lt;/li>
&lt;li>ラフデザイン&lt;/li>
&lt;li>仕上げ&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UIレギュレーション関連&lt;br>
トンマナ決定後、バージョン管理方法や命名規則などのレギュレーション管理を策定していく。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>テキストルール&lt;br>
UIで表示するテキスト群のルール。&lt;br>
これはWebの大規模サイトや多言語サイトとかと同じで、明確なガイドラインが必要な模様。そりゃそうだ。&lt;br>
NG例も明確に記載しているようで、これは参考にしようと思う。（いつも私はOKな例しか載せていなかった）&lt;/p>
&lt;ul>
&lt;li>語尾は体言止めにするか？&lt;/li>
&lt;li>システム側のテキスト文体は？&lt;/li>
&lt;li>ユーザー側のテキスト文体は？&lt;/li>
&lt;li>句読点はつけるのか？&lt;/li>
&lt;li>日付や時間の表記方法&lt;/li>
&lt;/ul>
&lt;p>表記ゆれが起こりやすいキーワードにはシソーラスリストを作成。&lt;/p>
&lt;ul>
&lt;li>ひらがな優先にするのか、漢字優先にするのか？&lt;/li>
&lt;li>送り仮名はどう添えるのか？&lt;/li>
&lt;li>全角・半角の使い分けは？&lt;/li>
&lt;/ul>
&lt;p>文章の禁則処理の使用策定&lt;/p>
&lt;ul>
&lt;li>句読点、閉じ括弧を行頭に位置させない、など &lt;br>
→これは動的な処理が含まれる場合はエンジニアと相談&lt;/li>
&lt;/ul>
&lt;p>本に記載されている具体例&lt;/p>
&lt;p>基本的なUIは体言止め&lt;/p>
&lt;ul>
&lt;li>OK例　決定&lt;/li>
&lt;li>NG例　決定する&lt;/li>
&lt;/ul>
&lt;p>システム視点では丁寧語を使用&lt;/p>
&lt;ul>
&lt;li>OK例　お待ちください&lt;/li>
&lt;li>NG例　待ってね&lt;/li>
&lt;/ul>
&lt;p>ユーザー視点では名詞を使用する&lt;/p>
&lt;ul>
&lt;li>OK例　決定　キャンセル&lt;/li>
&lt;li>NG例　はい　いいえ　OK！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>プロトタイピング&lt;/p>
&lt;ul>
&lt;li>
&lt;p>企画要件確認&lt;br>
→各画面の目的、機能、要素を整理する&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ゲームフロー&lt;br>
ゲームの場合は画面単位でUIデザインを進めると、画面間の遷移のUIが漏れてしまったり、画面間の流れを無視したUIデザインになりやすいため、全体の画面数、遷移ポイントの確認をまず行う。&lt;/p>
&lt;ol>
&lt;li>おおまかなメイン画面の洗い出し&lt;/li>
&lt;li>画面間の遷移をプロトタイピングツールなどでつなげる&lt;/li>
&lt;li>メインのフローが繋がったら、違和感がないか確認&lt;/li>
&lt;li>派生のサブ画面の洗い出し&lt;/li>
&lt;li>メイン画面とサブ画面をつなげる&lt;/li>
&lt;li>各フローの遷移に違和感がないか確認&lt;br>
※この段階では画面ごとのレイアウトは考えず、時間を割きすぎない&lt;/li>
&lt;/ol>
&lt;p>確認ポイントは以下&lt;/p>
&lt;ul>
&lt;li>所見のユーザーでも理解しやすいフローか&lt;/li>
&lt;li>段階的に学習できる、もしくは機能が提供されるフローか&lt;/li>
&lt;li>行き止まりのフローが存在しないか&lt;/li>
&lt;li>どこからも出入りできないフローが存在しないか&lt;/li>
&lt;li>ゲームのメインサイクルの遷移に違和感がないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>なお、ゲーム業界にはゲームのフローの分け方として、インゲーム、アウトゲームという考え方があるようで、前者格闘ゲームでいう対戦画面のようなゲームのメインの遊びの部分と、それまでのステージ選択や設定画面などの、それ以外のゲーム体験を分類する模様。
→この考え方はwebサイトやサービスでも使えるかもしれない。無意識に行う人は多いだろうが、明文化はあまりされていない気がする。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>デザイン&lt;/p>
&lt;ul>
&lt;li>
&lt;p>描画優先度
Webでもあるが、ゲームの場合はより厳格にルール化して、企画やエンジニアと認識を共有しておく必要がある。
例えば、特殊、システム、重要演出、固有機能、重要通知、常時表示、通常、演出、３D通知などのようなレイヤーに分ける。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>クオリティライン
各デザインの最終的なクオリティのラインを決定する。
実際には参考資料として、いくつかの画面をfixレベルまで作成して、それをベンチマークとして、できるだけ見える化。
要素としては、&lt;/p>
&lt;ul>
&lt;li>画面解像度&lt;/li>
&lt;li>質感&lt;/li>
&lt;li>装飾のボリューム&lt;/li>
&lt;li>アンチエイリアス&lt;/li>
&lt;li>演出&lt;br>
などがある模様&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>製品レギュレーション&lt;br>
プラットフォームによってルールがある模様。これはAndroidやiOSでも存在するのでアプリの場合は私も意識しておく必要がある。&lt;/p>
&lt;ul>
&lt;li>コントローラーなどの専用ハードウェアの画像の解像度&lt;/li>
&lt;li>一定時間以上のローディング中には何らかの情報やインタラクションを挿入する&lt;/li>
&lt;li>ユーザー層に合わせた肌の露出や暴力・性表現&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>再編集に向けたデータ調整&lt;br>
作成した各画像が、編集しやすい状態になっているかデータを調整する。&lt;br>
これにもOKサンプル、NGサンプルを用意してチーム内の認識を合わせている模様。&lt;/p>
&lt;ul>
&lt;li>ベクターデータかどうか&lt;/li>
&lt;li>レイヤーやレイヤーセットはわかりやすい命名になっているか&lt;/li>
&lt;li>テキストはアウトライン化したものではなく、編集機能を保持したデータも残しているか&lt;/li>
&lt;li>共通のパーツはシンボル化やスマートオブジェクトの仕組みを使用して、編集した場合にそのパーツを使用しているUIすべてに変更が反映されるか&lt;/li>
&lt;li>データはバージョン管理されているか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>開発&lt;/p>
&lt;ul>
&lt;li>
&lt;p>カルチャライズ&lt;br>
国や地域により、ゲームの内容を変更すること。ローカライズの一環だと思っていたが、言葉が分かれるらしい。&lt;br>
歴史、人種、公序良俗、色のイメージなどを精査して検討。ゲームの内容を大きく変更することもあるので、開発環境自体を分けることもある。&lt;br>
因みに国によっては、政府が推奨しない字形を用いたものはリリース不可となるそう。→軽く調べたがどの国か不明。中国で繫体字を使用するとか、そういう感じのものだろうか。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>デザイン基準解像度&lt;br>
確認時の解像度を決める。ターゲットユーザーの人口が最も多い解像度を基準にすることが一般的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>リダクション＆リファクタリング&lt;br>
リリース後も定期的に行う必要があるため、年間の運営スケジュールなどに工数として組み込むようにする。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>リダクション&lt;br>
リリース後も開発が続くとデータ量が増え、重くなる。なので減色やアトラス化などを行い、定期的にデータを削減したりする。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>リファクタリング&lt;br>
編集用データの不要な没デザインの削除、実装データの中で非表示になっているが削除されていないダミーデータの削除、各データのファイル形式の見直しなど&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UIのチェックフロー&lt;/p>
&lt;ol>
&lt;li>UIの実装ステータスとステータスごとのチェック項目を共有&lt;/li>
&lt;li>実際にゲームをプレイしてもらい、意見を集める&lt;/li>
&lt;li>届いた意見を管理しやすいカテゴリに分類&lt;/li>
&lt;li>カテゴリ内で肯定・否定・感想に分類&lt;/li>
&lt;li>優先度付け。&lt;/li>
&lt;li>ディレクターとどこまで対応するかすり合わせ&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UI改善について&lt;br>
使いやすいと思っても、ユーザーにとっては「使い慣れているので変えないでほしい」というケースもある&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>私流Wikiの使い方</title><link>https://maommm.github.io/hugo-blog/p/backlog-wiki/</link><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/backlog-wiki/</guid><description>&lt;p>Backlog等のプロジェクト管理ツールて便利ですが、ルールを作るのが意外と面倒だったり。wikiに記載するのは更に面倒だったり。&lt;br>
ということで私用備忘録である運用案件で決めた運用ルールなどwikiの内容をまとめておく。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Home&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>プロジェクト基本情報
テスト環境、本番環境のアクセス情報、その他Gdriveへのリンクなど&lt;/p>
&lt;/li>
&lt;li>
&lt;p>運用ポリシー
Issue作成時の注意など。
ガントチャートにて管理しているので、カテゴリ、Issueタイプ、開始日と終了日の入力は必須、、などのルール。
また、issue対応後のステータスやassigneeのルールなど。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Issueタイプ
親課題、バグ、要望などのissueタイプ
翻訳チーム用の翻訳タスク、などの変わったタイプもある。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>カテゴリ&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定例業務&lt;br>
→毎月行うような定例的な事務作業&lt;br>
定例打合せ、報告書作成、請求書関連、月次レビュー、収支確認など。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>問い合わせ対応&lt;br>
→クライアントの問い合わせで発生するタスク&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通常対応&lt;br>
→契約で決まっている通常の保守運用対応&lt;/p>
&lt;/li>
&lt;li>
&lt;p>社内タスク（クライアント調整要）&lt;br>
→社内のタスクだが、クライアントとの調整が必要なもの
クライアントとの業務フロー変更など。
より重要度が高いと判断&lt;/p>
&lt;/li>
&lt;li>
&lt;p>社内タスク（業務改善）&lt;br>
→社内の業務改善タスク。基本的には優先度は低く、対応期限は設定しても随時変更する可能性が高い&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保留タスク&lt;br>
現状対応の必要がないが、将来的には対応・提案の必要の可能性があるもの。&lt;br>
このカテゴリに関しては、対応期限を設定しない。&lt;br>
また、極力このカテゴリのタスクは作成しない。本当にどうしても保留にせざるを得ないときのみ使用。それ以外は対応要・不要を決めきることを意識している。&lt;br>
※定例業務、問い合わせ対応、通常対応に関しては、タスクに遅れが発生した場合、その時点でチャットで共有を行うようにしている。&lt;/p>
&lt;p>なお、このプロジェクトではタスクの優先度は設定せず、カテゴリにより優先度を決定している。問い合わせ対応の方が、社内タスクより優先度が高い、というような。&lt;br>
というのも、プロジェクトの性質、規模的にカテゴリで分けるくらいで大体のタスクの優先度が把握できるため、カテゴリと統一した方が混乱しにくいだろう、という考えているからである。&lt;br>
※タスク内の、細かい修正の対応リストなどではスプレッドシート上で優先度を設定することはある。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>体制&lt;br>
プロジェクトの体制、人員構成など。体制図とかは一応別にある。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>テンプレート&lt;/strong>&lt;br>
一部の特殊な対応のタスク記載用のテンプレート&lt;br>
基本的なタスクに関してはBacklogの機能でissue作成時に自動でテンプレートが表示されるようにしているが、たまに発生するがややこしいもののテンプレートなど。&lt;/p>
&lt;p>&lt;strong>マニュアル&lt;/strong>&lt;br>
各種作業のマニュアル・ガイドラインのリンクを表示&lt;br>
マニュアルは数が増えすぎないよう、品質と効率のバランスをとるようにしている。&lt;/p>
&lt;p>&lt;strong>作業者メモ&lt;/strong>&lt;br>
各作業者の細かい作業用のメモを入れる場所&lt;br>
メンバから週次mtgなどで、ルール化するほどではないが、対応方針を決めてあげたいような、細かい質問(例えばマークアップ時のタグのつけ方の細かいやり方の違いなど。案件的には違っていてもそんなに問題がないが、作業者は気になってしまうようなもの)が発生するので、試しに作ってみた。&lt;br>
基本的には、作業者が各自の作業時のメモを保管しておく。ほかの人から見られるので、参考にしたい情報があれば、覗きに行く感じ。&lt;br>
ただ、ルールとして、各作業者が自由に使うので、書き方は各自自由、かつ、参考にした作業者のメモにおかしな点があっても、否定を絶対にしない。（こうしないと誰も使わなくなってしまうので。）&lt;br>
案外お役立ちリンクみたいなものを作る人もいて、結構便利な感じだった。&lt;/p></description></item><item><title>翻訳・ローカライズ時の翻訳エラーのカテゴライズ</title><link>https://maommm.github.io/hugo-blog/p/translation-error/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/p/translation-error/</guid><description>&lt;img src="https://maommm.github.io/hugo-blog/p/translation-error/cover.jpg" alt="Featured image of post 翻訳・ローカライズ時の翻訳エラーのカテゴライズ" />&lt;p>ローカライゼーション、もしくは翻訳などを行う際、マイナー言語が含まれたり、大規模なローカライズのPJの場合に翻訳者・校正者などと制作・開発部門やクライアントのやりとりの際にミスコミュニケーションが発生し、修正に時間がかかりやすい。&lt;/p>
&lt;p>案件の特性上多言語でのやり取りになってしまいやすく、コミュニケーションの量というのも多くなってしまうためかと考えているが、それを解消するために、各エラーや問い合わせに対し、より明確にカテゴリ分けを行うことにした。&lt;/p>
&lt;p>参考にしたのは以下のリンク。&lt;br>
&lt;a class="link" href="https://www.meridianlinguistics.com/translation-careers/what-counts-as-a-translation-error/" target="_blank" rel="noopener"
>https://www.meridianlinguistics.com/translation-careers/what-counts-as-a-translation-error/&lt;/a>&lt;/p>
&lt;p>基本的には、大カテゴリとして、&lt;/p>
&lt;ul>
&lt;li>主観的エラー&lt;/li>
&lt;li>客観的エラー&lt;/li>
&lt;/ul>
&lt;p>として分類している。&lt;br>
客観的エラーはスタイルガイドや用語集に沿わないもの、&lt;br>
主観的エラーは単純な言葉の嗜好だったり、省略しても翻訳の正確性に影響を及ぼさないもの、などである。&lt;/p>
&lt;p>導入してみて、共通認識がもてるのでよりコミュニケーションはしやすくなたが、現状数が多く、運用しにくいのでもう少しシンプルにしていきたい。&lt;/p>
&lt;p>以下ざっくり一覧。&lt;/p>
&lt;p>客観的なエラー&lt;/p>
&lt;ul>
&lt;li>
&lt;p>句読点とスペルの誤り&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Omission&lt;br>
翻訳上、訳文に含む必要のある原文の翻訳抜け&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mistranslation&lt;br>
原文とは意味の異なる翻訳&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Undertranslation&lt;br>
訳文が原文より少ない情報になってしまったり、過度な単純化を行ってしまうこと&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Overtranslation&lt;br>
原文になかった情報、文言を追加すること。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Localization errors&lt;br>
指定された地域で一般的でない用語や語彙を使用した翻訳&lt;br>
イギリス英語とアメリカ英語、ブラジルポルトガル語とポルトガルポルトガル語などでの単語の差異など。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Stylistic Errores, Included in Style Guide&lt;br>
スタイルガイドで決められた文体、規則に従わないこと&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Specialized Terminology, Included in Glossary&lt;br>
クライアントと同意している用語集に記載されている専門用語を使用しないこと&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Specialized Terminology, Not Included in Glossary&lt;br>
用語集にはないが、社会通念上など、一般的に訳として使用されている専門用語ではない訳を使用すること。公的機関名などがこれにあたる。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Contextual Errors&lt;br>
翻訳の文脈上エラーとされるもの。&lt;br>
6月→Juneともsix monthsともとれるが、文脈上意味は決まっている。&lt;br>
※法律だと期間を例えば「6か月」ではなく「6月（ろくげつ）」などと表記されることが多い。翻訳者はよく混乱する模様。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Errors of Grammar or Syntax&lt;br>
翻訳が翻訳言語の標準的な文法や構文の規則に従っていないもの。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>主観的なエラー&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Preferential terms&lt;br>
誤訳ではないが、クライアントの意向に沿わない、もしくは事前に共有されていない特殊な訳が指摘されるような場合&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Preferential omissions&lt;br>
原文では表示されるが、訳文では翻訳しないもの。&lt;br>
翻訳の正確性には影響を及ぼさないもの。&lt;br>
「ー－等」の「等」がこれにあたる。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Stylistic Errors Not Included in Style Guide&lt;br>
トーン、書き方、フォーマルさなどで、訳文の意味に影響を及ぼさないが、クライアントの意向に沿わないもの&lt;br>
should not と must notどちらでも問題ない場合にクライアントから指摘が入るときなど。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Archives</title><link>https://maommm.github.io/hugo-blog/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/archives/</guid><description/></item><item><title>Links</title><link>https://maommm.github.io/hugo-blog/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/links/</guid><description>&lt;p>To use this feature, add &lt;code>links&lt;/code> section to frontmatter.&lt;/p>
&lt;p>This page&amp;rsquo;s frontmatter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">links&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub is the world&amp;#39;s largest software development platform.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://www.typescriptlang.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ts-logo-128.jpg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>image&lt;/code> field accepts both local and external images.&lt;/p></description></item><item><title>Search</title><link>https://maommm.github.io/hugo-blog/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://maommm.github.io/hugo-blog/search/</guid><description/></item></channel></rss>